import streamlit as st
import pandas as pd
import altair as alt
from datetime import datetime, timedelta
import io
import numpy as np

# -------------------------------
# Cores UBS Corretora
UBS_RED = "#E60000"
UBS_GRAY_LIGHT = "#F5F5F5"
UBS_GRAY_DARK = "#333333"
UBS_WHITE = "#FFFFFF"
UBS_BLACK = "#000000"

# -------------------------------
# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Simulador de Financiamento - UBS", page_icon="üè¶", layout="wide")

# CSS customizado
st.markdown(f"""
<style>
.stApp {{
    background-color: {UBS_GRAY_LIGHT};
}}
.stMetric {{
    background-color: {UBS_WHITE};
    color: {UBS_GRAY_DARK};
    border-radius:10px;
    padding:10px;
}}
</style>
""", unsafe_allow_html=True)

# -------------------------------
# Fun√ß√£o SAC
def calcular_sac(valor_financiado, taxa_juros, prazo_meses, amortizacao_extra=0):
    saldo_devedor = valor_financiado
    amortizacao_mensal = valor_financiado / prazo_meses
    dados = []
    mes = 1

    while saldo_devedor > 0 and mes <= prazo_meses:
        juros = saldo_devedor * taxa_juros
        amortizacao = amortizacao_mensal
        parcela = juros + amortizacao

        # Seguro aproximado 0.044% do saldo
        seguro = saldo_devedor * 0.00044
        taxa_admin = 25.0

        # Adiciona amortiza√ß√£o extra
        amortizacao_total = amortizacao + amortizacao_extra
        parcela_total = juros + amortizacao_total + seguro + taxa_admin

        saldo_devedor -= amortizacao_total
        if saldo_devedor < 0:
            amortizacao_total += saldo_devedor
            parcela_total += saldo_devedor
            saldo_devedor = 0

        dados.append([mes, parcela_total, juros, amortizacao_total, saldo_devedor, seguro, taxa_admin])
        mes += 1

    df = pd.DataFrame(dados, columns=["M√™s", "Presta√ß√£o_Total", "Juros", "Amortiza√ß√£o", "Saldo_Devedor", "Seguro", "Taxa_Admin"])
    return df

# -------------------------------
# Tabs
tab1, tab2, tab3 = st.tabs(["üì• Par√¢metros", "üìä Resultados", "üì§ Exportar"])

# --- Tab 1: Inputs ---
with tab1:
    st.header("Par√¢metros do Financiamento")
    
    col1, col2 = st.columns(2)
    with col1:
        valor_imovel = st.number_input("üí∞ Valor do Im√≥vel (R$)", min_value=100000, value=500000, step=1000)
        valor_entrada = st.number_input("üè¶ Valor da Entrada (R$)", min_value=0, max_value=valor_imovel, value=100000, step=1000)
        prazo_anos = st.slider("‚è±Ô∏è Prazo (anos)", min_value=5, max_value=35, value=20)
    with col2:
        taxa_juros_ano = st.number_input("üìà Taxa de Juros Anual (%)", min_value=0.1, max_value=20.0, value=8.0)
        amortizacao_extra = st.number_input("üíµ Amortiza√ß√£o Extra Mensal (R$)", min_value=0.0, value=1000.0)
        estrategia = st.selectbox("üéØ Estrat√©gia de amortiza√ß√£o extra", ["Reduzir Parcela", "Reduzir Prazo"])
    
    # Convers√µes e valida√ß√µes
    valor_financiado = valor_imovel - valor_entrada
    prazo_meses = prazo_anos * 12
    taxa_juros_mes = (1 + taxa_juros_ano / 100) ** (1/12) - 1

# --- Tab 2: Resultados ---
with tab2:
    st.header("Resumo da Simula√ß√£o")
    
    df_normal = calcular_sac(valor_financiado, taxa_juros_mes, prazo_meses, amortizacao_extra=0)
    df_com_amortizacao = calcular_sac(valor_financiado, taxa_juros_mes, prazo_meses, amortizacao_extra=amortizacao_extra)
    
    total_normal = df_normal["Presta√ß√£o_Total"].sum()
    total_com = df_com_amortizacao["Presta√ß√£o_Total"].sum()
    economia = total_normal - total_com
    
    # Cards m√©tricas
    st.markdown("### Principais M√©tricas")
    col1, col2, col3, col4, col5 = st.columns(5)
    col1.metric("üí∞ Total Sem Extra", f"R$ {total_normal:,.2f}")
    col2.metric("üí∞ Total Com Extra", f"R$ {total_com:,.2f}", f"Economia R$ {economia:,.2f}")
    col3.metric("‚è≥ Prazo Original", f"{len(df_normal)} meses")
    col4.metric("‚è≥ Prazo Final", f"{len(df_com_amortizacao)} meses")
    col5.metric("üíµ Amortiza√ß√£o Extra Mensal", f"R$ {amortizacao_extra:,.2f}")

    # Limite de meses para gr√°ficos
    mes_max = (prazo_anos + 5) * 12

    # Dados para gr√°ficos
    df_normal["Cen√°rio"] = "Sem Extra"
    df_com_amortizacao["Cen√°rio"] = "Com Extra"
    df_grafico = pd.concat([df_normal, df_com_amortizacao], ignore_index=True)

    # --- Corrigir c√°lculo da economia ---
    # Mapear Presta√ß√£o_Total do cen√°rio sem extra pelo m√™s
    prestacao_sem_extra_map = df_normal.set_index("M√™s")["Presta√ß√£o_Total"].to_dict()
    df_grafico["Presta√ß√£o_Sem_Extra"] = df_grafico["M√™s"].map(prestacao_sem_extra_map)
    df_grafico["Economia"] = df_grafico.apply(
        lambda x: x["Presta√ß√£o_Sem_Extra"] - x["Presta√ß√£o_Total"] if x["Cen√°rio"]=="Com Extra" else 0,
        axis=1
    )
    df_economia = df_grafico[df_grafico["Cen√°rio"]=="Com Extra"].copy()
    df_economia["Economia_Acum"] = df_economia["Economia"].cumsum()

    # 1Ô∏è‚É£ Saldo Devedor
    st.subheader("üìà Evolu√ß√£o do Saldo Devedor")
    chart_saldo = alt.Chart(df_grafico).mark_line(strokeWidth=3).encode(
        x=alt.X("M√™s", scale=alt.Scale(domain=[0, mes_max])),
        y="Saldo_Devedor",
        color=alt.Color("Cen√°rio", scale=alt.Scale(range=[UBS_GRAY_DARK, UBS_RED])),
        tooltip=["M√™s","Saldo_Devedor","Cen√°rio"]
    ).properties(width=700, height=400)
    st.altair_chart(chart_saldo, use_container_width=True)

    # 2Ô∏è‚É£ Composi√ß√£o da Parcela
    st.subheader("üìä Composi√ß√£o da Parcela (Juros x Amortiza√ß√£o)")
    df_comp = df_com_amortizacao.melt(id_vars=["M√™s"], value_vars=["Juros","Amortiza√ß√£o"], var_name="Componente", value_name="Valor")
    chart_comp = alt.Chart(df_comp).mark_area(opacity=0.7).encode(
        x=alt.X("M√™s", scale=alt.Scale(domain=[0, mes_max])),
        y="Valor",
        color=alt.Color("Componente", scale=alt.Scale(domain=["Juros","Amortiza√ß√£o"], range=[UBS_RED, UBS_GRAY_DARK])),
        tooltip=["M√™s","Componente","Valor"]
    ).properties(width=700, height=400)
    st.altair_chart(chart_comp, use_container_width=True)

    # 3Ô∏è‚É£ Juros Mensais
    st.subheader("üí∞ Evolu√ß√£o dos Juros Mensais")
    chart_juros = alt.Chart(df_grafico).mark_line(strokeWidth=2).encode(
        x=alt.X("M√™s", scale=alt.Scale(domain=[0, mes_max])),
        y="Juros",
        color=alt.Color("Cen√°rio", scale=alt.Scale(range=[UBS_GRAY_DARK, UBS_RED])),
        tooltip=["M√™s","Juros","Cen√°rio"]
    ).properties(width=700, height=350)
    st.altair_chart(chart_juros, use_container_width=True)

    # 4Ô∏è‚É£ Amortiza√ß√£o Mensal
    st.subheader("üéØ Evolu√ß√£o da Amortiza√ß√£o Mensal")
    chart_amort = alt.Chart(df_grafico).mark_bar(opacity=0.7).encode(
        x=alt.X("M√™s", scale=alt.Scale(domain=[0, mes_max])),
        y="Amortiza√ß√£o",
        color=alt.Color("Cen√°rio", scale=alt.Scale(range=[UBS_GRAY_DARK, UBS_RED])),
        tooltip=["M√™s","Amortiza√ß√£o","Cen√°rio"]
    ).properties(width=700, height=350)
    st.altair_chart(chart_amort, use_container_width=True)

    # 5Ô∏è‚É£ Presta√ß√£o Total
    st.subheader("üíµ Evolu√ß√£o da Presta√ß√£o Total")
    chart_prest = alt.Chart(df_grafico).mark_line(strokeWidth=2).encode(
        x=alt.X("M√™s", scale=alt.Scale(domain=[0, mes_max])),
        y="Presta√ß√£o_Total",
        color=alt.Color("Cen√°rio", scale=alt.Scale(range=[UBS_GRAY_DARK, UBS_RED])),
        tooltip=["M√™s","Presta√ß√£o_Total","Cen√°rio"]
    ).properties(width=700, height=350)
    st.altair_chart(chart_prest, use_container_width=True)

    # 6Ô∏è‚É£ Economia Acumulada
    st.subheader("üí∏ Economia Acumulada com Amortiza√ß√£o Extra")
    chart_econ = alt.Chart(df_economia).mark_line(strokeWidth=2, color=UBS_RED).encode(
        x=alt.X("M√™s", scale=alt.Scale(domain=[0, mes_max])),
        y="Economia_Acum",
        tooltip=["M√™s","Economia_Acum"]
    ).properties(width=700, height=350)
    st.altair_chart(chart_econ, use_container_width=True)

    # 7Ô∏è‚É£ Composi√ß√£o de Custos
    st.subheader("üìä Composi√ß√£o de Custos (Juros + Amortiza√ß√£o + Seguro + Taxa Admin)")
    df_custo = df_com_amortizacao.melt(id_vars=["M√™s"], value_vars=["Juros","Amortiza√ß√£o","Seguro","Taxa_Admin"], var_name="Componente", value_name="Valor")
    chart_custo = alt.Chart(df_custo).mark_area(opacity=0.7).encode(
        x=alt.X("M√™s", scale=alt.Scale(domain=[0, mes_max])),
        y="Valor",
        color=alt.Color("Componente", scale=alt.Scale(range=[UBS_RED, UBS_GRAY_DARK, "#FFA500", "#008000"])),
        tooltip=["M√™s","Componente","Valor"]
    ).properties(width=700, height=400)
    st.altair_chart(chart_custo, use_container_width=True)

# --- Tab 3: Exportar ---
with tab3:
    st.header("üì§ Exportar Resultados")
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
        df_normal.to_excel(writer, sheet_name="Sem_Amortizacao", index=False)
        df_com_amortizacao.to_excel(writer, sheet_name="Com_Amortizacao", index=False)
        writer.save()
    st.download_button(
        label="üì• Baixar Simula√ß√£o em Excel",
        data=buffer,
        file_name="simulacao_financiamento_ubs.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# Rodap√©
st.mark
